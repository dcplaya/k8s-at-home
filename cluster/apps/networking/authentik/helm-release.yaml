---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: networking
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.goauthentik.io
      chart: authentik
      version: 4.0.0
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
      interval: 5m
  values:
    image:
      repository: ghcr.io/goauthentik/server
      tag: 2021.10.1
    env:
      TZ: "America/Los_Angeles"
    replicas: 2
    worker:
      replicas: 2
    authentik:
      log_level: debug
      # -- Secret key used for cookie singing and unique user IDs,
      # don't change this after the first install
      secret_key: ${SECRET_AUTHENTIK_SECRET_KEY}
      # email:
      #   from: authentik@services.beryju.org
      #   host: email-smtp.eu-central-1.amazonaws.com
      #   port: 587
      #   use_tls: true
      # This sends anonymous usage-data, stack traces on errors and
      # performance data to sentry.beryju.org, and is fully opt-in
      error_reporting:
        enabled: true
      postgresql:
        enabled: true
        ## if unset, default is "{{ .Release.Name }}-postgresql"
        # host: 
        password: "${SECRET_AUTHENTIK_POSTGRE_PASSWORD}"
        user: "authentik"
        # s3_backup:
        #   bucket: "authentik-backup"
        #   host: "https://backup-s3.beryju.org"
      redis:
        # -- set the redis hostname to talk to
        # @default -- `{{ .Release.Name }}-redis-master`
        # host:
        password: "${SECRET_AUTHENTIK_POSTGRE_PASSWORD}"
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hajimari.io/enable: "true"
        # hajimari.io/icon: "mdiTelevisionClassic"
        # hajimari.io/url:
        # hajimari.io/appName: 
      hosts:
        - host: "authentik.${SECRET_DOMAIN}"
          paths:
            - path: "/"
              pathType: Prefix
    postgresql:
      enabled: true
      postgresqlUsername: "authentik"
      postgresqlPassword: "${SECRET_AUTHENTIK_POSTGRE_PASSWORD}"
      postgresqlDatabase: "authentik"
      persistence:
        enabled: true
        storageClass: "rook-ceph-block"
    redis:
      enabled: true
      auth:
        enabled: true
        password: "${SECRET_AUTHENTIK_POSTGRE_PASSWORD}"
      master:
        persistence:
          storageClass: "rook-ceph-block"








    
