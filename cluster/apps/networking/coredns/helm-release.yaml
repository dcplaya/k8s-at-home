---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: coredns
  namespace: networking
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://coredns.github.io/helm
      chart: coredns
      version: 1.15.0
      sourceRef:
        kind: HelmRepository
        name: coredns-charts
        namespace: flux-system
      interval: 5m
  values:
    nameOverride: coredns
    fullnameOverride: coredns
    rbac:
      create: true
    replicaCount: 3
    isClusterService: false
    serviceType: LoadBalancer
    service:
      loadBalancerIP: "${LB_COREDNS_IP}"
      externalTrafficPolicy: Local
    servers:
    - zones:
      - zone: ${SECRET_DOMAIN}.
        scheme: dns://
      port: 53
      plugins:
      - name: log
      - name: errors
      - name: health
        configBlock: |-
          lameduck 5s
      - name: ready
      # Static hosts
      - name: hosts
        configBlock: |-
          10.10.1.1 drew.${SECRET_DOMAIN}
          10.10.200.210 nexus.${SECRET_DOMAIN}
          10.10.200.210 registry.${SECRET_DOMAIN}
          10.10.200.210 registry-cache.${SECRET_DOMAIN}
          10.10.200.210 nas01.${SECRET_DOMAIN}
          10.10.200.220 unifi.${SECRET_DOMAIN}
          fallthrough
      - name: kubernetes
        parameters: cluster.local in-addr.arpa ip6.arpa
        configBlock: |-
          pods insecure
          fallthrough in-addr.arpa ip6.arpa
          ttl 30
      - name: prometheus
        parameters: 0.0.0.0:9153
      # Forward everything else to Cloudflare DNS
      # Note: plugin/forward: this plugin can only be used once per Server Block
      - name: forward
        parameters: . 1.1.1.1
        configBlock: |-
          except elcarpenter.com *.elcarpenter.com stricklybeans.com *.stricklybeans.com
      - name: cache
        parameters: 30
      # Detects simple forwarding loops and halts the CoreDNS process if a loop is found.
      - name: loop
      # Allows automatic reload of a changed Corefile.
      - name: reload
      # The loadbalance will act as a round-robin DNS load balancer by randomizing the order of A, AAAA, and MX records in the answer.
      - name: loadbalance
      # I need this due to having 2 ingress controllers. Without it, internal resolves to external ingress due to zonefiles below
      - name: etcd
        parameters: ${SECRET_DOMAIN}
        configBlock: |-
          stubzones
          path /skydns
          endpoint http://etcd:2379
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - coredns
          topologyKey: "kubernetes.io/hostname"
    resources:
      requests:
        memory: 200Mi
        cpu: 50m
      limits:
        memory: 500Mi
